Алгоритм решения головоломки "Как сделать из Мухи Слона"

Для решения выбран генетический алгоритм. Тем более он тут просто напрашивается — изменение 
буквы в слове это по сути мутация. Условие выживания потомка при «родах» — существование в
словаре. Условие успешности конкуренции, приспособленности — степень схожести с искомым словом.

Функция оценки похожести слов выбран из следующих соображений
— Идентичность букв на верных позициях 3 балла - максимальная оенка.
— Гласная, пусть и другая, в нужной позиции 2 балла: Гласную в нужное место гораздо труднее 
  подтащить, зато она потом с помощью мутаций согласных, а таких вариантов больше, легче 
  смутирует уже в нужную гласную. К тому же гласная «задаёт тон» — около неё легче крутятся 
  согласные, в том числе нужные под искомое слово.
— Наличие гласной вообще 1 балл: Схожие рассуждения с приведёнными выше, гласную мутировать 
  значительно труднее чем согласные.

Поиск новых вариантов мутаций идёт по словарю, отталкиваясь от заданного слова. 
При этом есть несколько дополнительных логических ограничений.
Первое ограничение — это допустимые позиции букв для мутации. В самом деле, если на прошлом шаге 
мы, например, поменяли 3-ю буквы, сделав ход «муХа» — «муЗа», то на следующем шаге мутация 
«муЗа» — «муРа» лишена смысла. Ведь нам интересна максимально короткая цепочка. 
А так мы получается делаем заведомо лишний шаг, ведь можно было сразу сделать ход «муХа» — «муРа». 
Поэтому в класс цепочки слов введен параметр позиции прошлой мутации.

Второе ограничение — это уникальность слов в цепочке. Объясняется тоже просто. Допустим, есть 
цепочка «муха» — "мука" — «бука» — «бура» — «мура» — "мука" — «рука». Очевидно, что кусок 
"мука" — «бука» — «бура» — «мура» был лишним в цепочке. И даже если она дойдёт до финального 
искомого «слона», то ровно такая же, но цепочка из уникальных слов с выкинутыми повторами будет 
короче. А значит лучше. Так что такие циклы из-за повторов нам не нужны. Поэтому вместо самого слова
мы передаем всю цепочку слов.


